{"ast":null,"code":"export function AddTwo() {\n  const mystring = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \";\n  console.log(mystring.length);\n} //const mystring = \"Eat a bag of bagels\";\n\n_c = AddTwo;\nexport function CoolThingsILearned() {\n  //const myconcat[] = mystring.substr(4,3);\n  const mystring = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \";\n  console.log(mystring.length);\n}\n_c2 = CoolThingsILearned;\nexport function exampleURLFetch() {\n  fetch('https://jsonplaceholder.typicode.com/todos/1', {\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    }\n  }).then(response => response.json()).then(data => console.log(data));\n}\nexport function tutorialfetch() {\n  fetch('https://reqres.in/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: 'User 1'\n    })\n  }).then(res => {\n    return res.json();\n  }).then(data => console.log(data));\n}\nexport function tutorialpromise() {\n  //really good when u need to do something that will take a long time in the background\n  //like downloading image from another server so you can do something else while u wait\n  let p = new Promise((resolve, reject) => {\n    let a = 1 + 1;\n\n    if (a == 2) {\n      resolve('Success');\n    } else {\n      reject('Failed');\n    }\n  });\n  p.then(message => {\n    console.log('This is in the then ' + message);\n  }).catch(message => {\n    console.log('This is in the catch ' + message);\n  });\n}\nexport function tutorialAwait() {\n  let makeRequest = location => {\n    return new Promise((resolve, reject) => {\n      console.log(`Making Request to ${location}`);\n\n      if (location === 'Google') {\n        resolve('Google says hi');\n      } else {\n        reject('We can only talk to Google');\n      }\n    });\n  };\n\n  let processRequest = response => {\n    return new Promise((resolve, reject) => {\n      console.log('Processing response');\n      resolve(`Extra Information + ${response}`);\n    });\n  };\n\n  makeRequest('Google').then(response => {\n    console.log('Response Recieved');\n    return processRequest(response);\n  }).then(processedResponse => {\n    console.log(processedResponse);\n  });\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddTwo\");\n$RefreshReg$(_c2, \"CoolThingsILearned\");","map":{"version":3,"sources":["C:/Users/lukes/Desktop/FrontendMasters/DogEar/src/codeinjection.js"],"names":["AddTwo","mystring","console","log","length","CoolThingsILearned","exampleURLFetch","fetch","headers","then","response","json","data","tutorialfetch","method","body","JSON","stringify","name","res","tutorialpromise","p","Promise","resolve","reject","a","message","catch","tutorialAwait","makeRequest","location","processRequest","processedResponse"],"mappings":"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","sourcesContent":["export function AddTwo(){\r\n    const mystring = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \"\r\nconsole.log(mystring.length);\r\n}\r\n\r\n//const mystring = \"Eat a bag of bagels\";\r\n\r\nexport function CoolThingsILearned()\r\n{\r\n    //const myconcat[] = mystring.substr(4,3);\r\n\r\n    const mystring = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \"\r\n    console.log(mystring.length);\r\n}\r\n\r\n\r\nexport function exampleURLFetch()\r\n{\r\n    fetch('https://jsonplaceholder.typicode.com/todos/1', {\r\n        headers: {'Access-Control-Allow-Origin': '*'},\r\n    })\r\n        .then(response => response.json())\r\n        .then(data =>console.log(data));\r\n}\r\n\r\nexport function tutorialfetch()\r\n{\r\n    fetch('https://reqres.in/api/users', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type' : 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            name: 'User 1'\r\n        })\r\n    })\r\n    .then(res => {\r\n        return res.json()\r\n    })\r\n    .then(data =>console.log(data))\r\n}\r\n\r\nexport function tutorialpromise()\r\n{\r\n    //really good when u need to do something that will take a long time in the background\r\n    //like downloading image from another server so you can do something else while u wait\r\n\r\n    let p = new Promise((resolve, reject) => {\r\n        let a = 1+1\r\n        if(a ==2){\r\n            resolve('Success')\r\n        }else{\r\n            reject('Failed')\r\n        }\r\n    })\r\n\r\n    p.then((message)=>{\r\n        console.log('This is in the then ' + message)\r\n    }).catch((message) => {\r\n        console.log('This is in the catch ' + message)\r\n    })\r\n}\r\n\r\nexport function tutorialAwait()\r\n{\r\n    let makeRequest = (location) => {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(`Making Request to ${location}`)\r\n            if(location === 'Google') {\r\n                resolve('Google says hi')\r\n            } else {\r\n                reject('We can only talk to Google')\r\n            }\r\n        })\r\n    };\r\n\r\n    let processRequest = (response) => {\r\n        return new Promise((resolve, reject) => {\r\n            console.log('Processing response')\r\n            resolve(`Extra Information + ${response}`)\r\n        })\r\n    };\r\n\r\n    makeRequest('Google').then(response => {\r\n        console.log('Response Recieved')\r\n        return processRequest(response)\r\n    }).then(processedResponse => {\r\n        console.log(processedResponse)\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}