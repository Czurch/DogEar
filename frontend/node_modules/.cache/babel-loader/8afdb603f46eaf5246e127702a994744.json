{"ast":null,"code":"import _asyncToGenerator from\"C:/Users/lukes/Desktop/FrontendMasters/DogEar/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\lukes\\\\Desktop\\\\FrontendMasters\\\\DogEar\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";export function AddTwo(){var mystring=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \";console.log(mystring.length);}//const mystring = \"Eat a bag of bagels\";\nexport function CoolThingsILearned(){//const myconcat[] = mystring.substr(4,3);\nvar mystring=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \";console.log(mystring.length);}export function exampleURLFetch(){// fetch('https://jsonplaceholder.typicode.com/todos/1', {\n//     headers: {'Access-Control-Allow-Origin': '*'},\n// })\n//     .then(response => response.json())\n//     .then(data =>console.log(data));\nfetch('http://reddit.com',{method:'GET',mode:'cors',headers:{}});}export function tutorialfetch(){fetch('https://reqres.in/api/users',{// method: 'POST',\n// headers: {\n//     'Content-Type' : 'application/json'\n// },\n// body: JSON.stringify({\n//     name: 'User 1'\n// })\n}).then(function(res){return res.json();}).then(function(data){return console.log(data);});}export function tutorialpromise(){//really good when u need to do something that will take a long time in the background\n//like downloading image from another server so you can do something else while u wait\nvar p=new Promise(function(resolve,reject){var a=1+1;if(a==2){resolve('Success');}else{reject('Failed');}});p.then(function(message){console.log('This is in the then '+message);}).catch(function(message){console.log('This is in the catch '+message);});}export function tutorialAwait(){var makeRequest=function makeRequest(location){return new Promise(function(resolve,reject){console.log(\"Making Request to \".concat(location));if(location==='Google'){resolve('Google says hi');}else{reject('We can only talk to Google');}});};var processRequest=function processRequest(response){return new Promise(function(resolve,reject){console.log('Processing response');resolve(\"Extra Information + \".concat(response));});};// makeRequest('Google').then(response => {\n//     console.log('Response Recieved')\n//     return processRequest(response)\n// }).then(processedResponse => {\n//     console.log(processedResponse)\n// }).catch(err => {\n//     console.log(err)\n// })\n/*\r\n    asynchronous code must be wrapped in a function with the keyword async\r\n    also make sure you use await keywork before asynchronous calls otherwise it will \r\n    just return the promise and not actually return the result of that promise\r\n    */var doWork=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,processedResponse;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return makeRequest('Google');case 3:response=_context.sent;console.log('Response Received');processedResponse=processRequest(response);console.log(processedResponse);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function doWork(){return _ref.apply(this,arguments);};}();doWork();}","map":{"version":3,"sources":["C:/Users/lukes/Desktop/FrontendMasters/DogEar/frontend/src/codeinjection.js"],"names":["AddTwo","mystring","console","log","length","CoolThingsILearned","exampleURLFetch","fetch","method","mode","headers","tutorialfetch","then","res","json","data","tutorialpromise","p","Promise","resolve","reject","a","message","catch","tutorialAwait","makeRequest","location","processRequest","response","doWork","processedResponse"],"mappings":"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","sourcesContent":["export function AddTwo(){\r\n    const mystring = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \"\r\nconsole.log(mystring.length);\r\n}\r\n\r\n//const mystring = \"Eat a bag of bagels\";\r\n\r\nexport function CoolThingsILearned()\r\n{\r\n    //const myconcat[] = mystring.substr(4,3);\r\n\r\n    const mystring = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \"\r\n    console.log(mystring.length);\r\n}\r\n\r\n\r\nexport function exampleURLFetch()\r\n{\r\n    // fetch('https://jsonplaceholder.typicode.com/todos/1', {\r\n    //     headers: {'Access-Control-Allow-Origin': '*'},\r\n    // })\r\n    //     .then(response => response.json())\r\n    //     .then(data =>console.log(data));\r\n\r\n    fetch('http://reddit.com', {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            headers: {}\r\n        })\r\n}\r\n\r\nexport function tutorialfetch()\r\n{\r\n    fetch('https://reqres.in/api/users', {\r\n        // method: 'POST',\r\n        // headers: {\r\n        //     'Content-Type' : 'application/json'\r\n        // },\r\n        // body: JSON.stringify({\r\n        //     name: 'User 1'\r\n        // })\r\n    })\r\n    .then(res => {\r\n        return res.json()\r\n    })\r\n    .then(data =>console.log(data))\r\n}\r\n\r\nexport function tutorialpromise()\r\n{\r\n    //really good when u need to do something that will take a long time in the background\r\n    //like downloading image from another server so you can do something else while u wait\r\n\r\n    let p = new Promise((resolve, reject) => {\r\n        let a = 1+1\r\n        if(a ==2){\r\n            resolve('Success')\r\n        }else{\r\n            reject('Failed')\r\n        }\r\n    })\r\n\r\n    p.then((message)=>{\r\n        console.log('This is in the then ' + message)\r\n    }).catch((message) => {\r\n        console.log('This is in the catch ' + message)\r\n    })\r\n}\r\n\r\nexport function tutorialAwait()\r\n{\r\n    let makeRequest = (location) => {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(`Making Request to ${location}`)\r\n            if(location === 'Google') {\r\n                resolve('Google says hi')\r\n            } else {\r\n                reject('We can only talk to Google')\r\n            }\r\n        })\r\n    };\r\n\r\n    let processRequest = (response) => {\r\n        return new Promise((resolve, reject) => {\r\n            console.log('Processing response')\r\n            resolve(`Extra Information + ${response}`)\r\n        })\r\n    };\r\n\r\n    // makeRequest('Google').then(response => {\r\n    //     console.log('Response Recieved')\r\n    //     return processRequest(response)\r\n    // }).then(processedResponse => {\r\n    //     console.log(processedResponse)\r\n    // }).catch(err => {\r\n    //     console.log(err)\r\n    // })\r\n\r\n    /*\r\n    asynchronous code must be wrapped in a function with the keyword async\r\n    also make sure you use await keywork before asynchronous calls otherwise it will \r\n    just return the promise and not actually return the result of that promise\r\n    */\r\n\r\n    let doWork = async () => {\r\n        try {\r\n        const response = await makeRequest('Google')\r\n        console.log('Response Received')\r\n        const processedResponse = processRequest(response)\r\n        console.log(processedResponse)\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    doWork()\r\n}"]},"metadata":{},"sourceType":"module"}